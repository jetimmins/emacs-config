#+title: GNU Emacs configuration
#+author: Jay Eden Timmins
#+email: jaytimmins@gmail.com
#+options: 'toc:nil author:t email:t
#+startup: content indent
#+macro: latest-export-date (eval (format-time-string "%F %T %z"))
#+macro: word count (eval (count-words (point-min) (point-max)))
#+property: header-args :tangle "init.el"

*Last revised on {{{latest-export-date}}} with a word count of {{{word-count}}}.*

Todos:
- Add my additional development tooling configuration
- Make this more portable (certain config doesn't play nicely on MacOS right now, e.g. visual-bell-mode)
- Clean up some of the `setq` with idiomatic use-package usage instead
- Bring in more keybinds and use `commander`

* Configure use-package
Basic configuration of use-package. I've elected not to use anything like elpaca/straight.el as I don't regularly need to pull directly for git repos and I'm not concerned about version pinning for reproducible builds right now.
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")
                           ("elpa"  . "https://elpa.gnu.org/packages/")))

  ;; Prefer stable / gnu archives
  (setq package-archive-priorities
        '(("melpa-stable" . 10)
          ("elpa" . 5)
          ("melpa" . 1)))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-and-compile
    (setq use-package-always-ensure t
          use-package-expand-minimally t))
#+end_src

* Sensible defaults
Settings which form the basis of any of my configurations.
** UI
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)          ; Disable visible scrollbar
  (tool-bar-mode -1)            ; Disable the toolbar
  (tooltip-mode -1)             ; Disable tooltips
  (set-fringe-mode 10)          ; Add some fringe margin
  (menu-bar-mode -1)            ; Disable menu bar
  (setq visible-bell t)         ; Flash instead of unpleasant ding
#+end_src

** Input
#+begin_src emacs-lisp
  (repeat-mode)                 ; Full chord not required for repetitive inputs
  (global-auto-revert-mode) ; Revert the buffer when the file changes on disk
    ;; Configure minibuffer: no cursor, recursive
  (use-package emacs
    :init
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
    (setq enable-recursive-minibuffers t))
  #+end_src
** Text formatting
#+begin_src emacs-lisp
    (setq-default buffer-file-coding-system 'utf-8-unix)

  ;;Standardize line endings for all programming language modes
  (add-hook 'prog-mode-hook
            (lambda ()
              ;; Set buffer's line ending system
              (set-buffer-file-coding-system 'utf-8-unix)
            
              ;; Convert existing CRLF to LF
              (when (and (buffer-file-name)
                        (not buffer-read-only))
                (save-excursion
                  (goto-char (point-min))
                  (while (search-forward "\r\n" nil t)
                    (replace-match "\n" nil t))))))

#+end_src
** Configuration file management
#+begin_src emacs-lisp
  ;; Keep working directory tidy
(make-directory "~/.tmp/emacs/auto-save/" t)
(setq auto-save-file-name-transforms '((".*" "~/.tmp/emacs/auto-save/" t)))
(setq backup-directory-alist '(("." . "~/.tmp/emacs/backup/")))
(setq backup-by-copying t)
(setq create-lockfiles nil)

;; Write customizations to a separate file
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file t)
#+end_src

* Theme, modebar, icons
#+begin_src emacs-lisp
  (use-package all-the-icons
  :if (display-graphic-p)
  :commands all-the-icons-install-fonts
  :init
  (unless (find-font (font-spec :name "all-the-icons"))
    (all-the-icons-install-fonts t)))

(use-package doom-modeline
  :init (doom-modeline-mode 1))

(use-package doom-themes
  :config
  (load-theme 'doom-gruvbox t))
#+end_src

* QoL external packages
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :config
  (setq which-key-idle-delay 0.3))

(use-package helpful
  :bind
  ([remap describe-function] . helpful-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-key] . helpful-key))
#+end_src

* Org-mode config
#+begin_src emacs-lisp
;; Hook to configure org-mode for any new buffer
(defun jet/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

;; TODO: use :custom instead of setq
(use-package org
  :hook (org-mode . jet/org-mode-setup)
  :config
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  (setq org-agenda-window-setup 'current-window)
  (setq org-ellipsis " â–¼")
  (setq org-agenda-files '("~/orgfiles"))
  (setq org-todo-keywords
	'((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
	  (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))
  (setq org-hide-emphasis-markers t))
#+end_src

* Incremental completion, selection narrowing & snippets
Lightweight stack rather than a heavy framework. Yasnippet is still my preferred template system however it often doesn't integrate well with corfu. The consult-yasnippet package makes snippets discoverable and quick to apply without depending on a flimsy integration.

#+begin_src emacs-lisp
  (use-package vertico
    :init (vertico-mode))

  (use-package orderless
    :init
    (setq completion-styles '(orderless flex)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

  (use-package marginalia
    :bind (:map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init (marginalia-mode))

  (use-package consult
    :bind
    ("M-s g" . consult-grep)
    ("M-s G" . consult-git-grep)
    ("C-c r" . replace-string)
    ("C-c M-r" . replace-regexp)
    ([remap isearch-forward] . consult-line)
    ([remap switch-to-buffer] . consult-buffer)
    :hook (completion-list-mode . consult-preview-at-point-mode)
    :config (setq consult-narrow-key "<"))

  (use-package corfu
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.0)
    :bind
    (:map corfu-map ("M-SPC" . corfu-insert-separator))
    :init
    (global-corfu-mode)
    (corfu-history-mode))

  (use-package yasnippet
    :config (yas-global-mode 1))

  (use-package yasnippet-snippets
    :after yasnippet)

  (use-package consult-yasnippet
    :after (consult yasnippet)
    :bind ("C-c s" . consult-yasnippet)
    :config (setq consult-yasnippet-use-preview t))

#+end_src
* Development
** UI
Open compilation related buffers at 20% height at the bottom.
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\*compilation\\*"
                 (display-buffer-at-bottom)
                 (window-height . 0.2)))
#+end_src
** Development tooling
#+begin_src emacs-lisp
  (use-package projectile
  :config (projectile-mode)
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/code")
    (setq projectile-project-search-path '("~/code")))
  (setq projectile-switch-project-action #'projectile-dired))

  (use-package magit)

  (use-package savehist
    :ensure nil
    :init (savehist-mode 1)
    :config
    (setq savehist-additional-variables '(kill-ring search-ring regexp-search-ring))
    (setq savehist-file "~/.tmp/emacs/savehist"))

  (use-package flycheck
    :init (global-flycheck-mode)
    :hook (ruby-ts-mode . flycheck-mode))
#+end_src
** LSP & Grammars
#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-completion-provider :none)
    (defun my/lsp-mode-setup-completion () ;; Play nicely with orderless
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
          '(flex)))
    :bind
    ("C-c l f" . lsp-format-buffer)
    :hook
    (c-ts-mode . lsp)
    (c++-ts-mode . lsp)
    (clojure-ts-mode . lsp)
    (python-ts-mode . lsp)
    (json-ts-mode . lsp)
    (lsp-completion . my/lsp-mode-setup-completion)
    (lsp-mode . lsp-enable-which-key-integration)  ;; could be trouble (with-eval-after-load)
    :config
    ;; Performance
    (setq lsp-log-io nil
          lsp-restart 'auto-restart
          lsp-enable-symbol-highlighting nil
          lsp-enable-on-type-formatting nil
          lsp-signature-auto-activate nil
          lsp-signature-render-documentation nil
          lsp-eldoc-hook nil
          lsp-modeline-code-actions-enable nil
          lsp-modeline-diagnostics-enable nil
          lsp-headerline-breadcrumb-enable nil
          lsp-semantic-tokens-enable nil
          lsp-enable-folding nil
          lsp-enable-imenu nil
          lsp-enable-snippet nil
          lsp-idle-delay 0.1
          read-process-output-max (* 1024 1024)
          gc-cons-threshold (* 100 1024)))
  
      ;; Treesitter grammars -- install with M-x treesit-install-language-grammar
    (setq treesit-language-source-alist
          '((bash "https://github.com/tree-sitter/tree-sitter-bash")
            (c "https://github.com/tree-sitter/tree-sitter-c")
            (clojure "https://github.com/oakmac/tree-sitter-clojure")
            (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
            (css "https://github.com/tree-sitter/tree-sitter-css")
            (elisp "https://github.com/Wilfred/tree-sitter-elisp")
            (go "https://github.com/tree-sitter/tree-sitter-go")
            (html "https://github.com/tree-sitter/tree-sitter-html")
            (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
            (json "https://github.com/tree-sitter/tree-sitter-json")
            (make "https://github.com/alemuller/tree-sitter-make")
            (markdown "https://github.com/ikatyang/tree-sitter-markdown")
            (python "https://github.com/tree-sitter/tree-sitter-python")
            (ruby "https://github.com/tree-sitter/tree-sitter-ruby")
            (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
            (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

    ;; Enable treesit major modes by default
    (add-to-list 'major-mode-remap-alist '(c-mode . c-ts-mode))
    (add-to-list 'major-mode-remap-alist '(c++-mode . c++-ts-mode))
    (add-to-list 'major-mode-remap-alist
                 '(c-or-c++-mode . c-or-c++-ts-mode))
    (add-to-list 'major-mode-remap-alist '(clojure-mode . clojure-ts-mode))
    (add-to-list 'major-mode-remap-alist '(json-mode . json-ts-mode))
    (add-to-list 'major-mode-remap-alist '(python-mode . python-ts-mode))
    (add-to-list 'major-mode-remap-alist '(ruby-mode . ruby-ts-mode))
#+end_src
** Language specific tools
*** Ruby
I quickly found very irritating bugs with both solargraph and ruby-lsp. Robe with Rubocop as a formatter/linter is a much better experience.
#+begin_src emacs-lisp
  (use-package rubocop
    :hook (ruby-ts-mode . rubocop-mode)
    :config (setq rubocop-autocorrect-on-save t))

  ;; Robe requires a background REPL
  (use-package inf-ruby
    :hook (ruby-ts-mode . inf-ruby-minor-mode))

  (use-package robe
    :init
    (defun my/robe-setup-completion()
      (add-to-list 'completion-at-point-functions 'robe-complete-at-point))
    :hook
    (ruby-ts-mode . robe-mode)
    (ruby-ts-mode . robe-start)
    (robe-mode . my/robe-setup-completion))
#+end_src
* Debug
#+begin_src emacs-lisp
  (setq lsp-print-io t)
#+end_src
